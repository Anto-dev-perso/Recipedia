name: Build & Test Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  actions: read

jobs:
  install-and-doctor:
    name: Install Dependencies and run Expo doctor
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - name: Cache node modules
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}



  unit-tests-and-coverage:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: install-and-doctor
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Restore node modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Run tests with coverage
        run: npm run test:unit:coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: jest-results.json
          retention-days: 7

      - name: Unit tests summary
        uses: test-summary/action@v2
        with:
          paths: jest-results.json
          output: unit-test-summary
        if: always()

      - name: Upload unit tests summary
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-summary
          path: unit-test-summary.md
        if: always()

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

      - name: Coverage check
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/cobertura-coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '75 90'

  build-android:
    if: github.actor != 'dependabot[bot]'
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: install-and-doctor
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            build_required:
              - 'src/**'
              - 'android/**'
              - 'app.json'
              - 'app.config.ts'
              - 'eas.json'
              - 'package.json'
              - 'package-lock.json'
              - 'metro.config.js'
              - 'babel.config.js'
              - 'tsconfig.json'
          base: ${{ github.event.pull_request.base.sha || github.event.before }}

      - name: Restore node modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Build decision summary
        run: |
          BRANCH="${{ github.head_ref || github.ref_name }}"
          echo "üîç Build Decision Analysis"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Build-triggering files changed: ${{ steps.filter.outputs.build_required }}"
          echo "Branch: $BRANCH"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "üì¶ Decision: BUILD (main branch always builds)"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "üì¶ Decision: BUILD (tag always builds)"
          elif [ "${{ steps.filter.outputs.build_required }}" = "true" ]; then
            echo "üì¶ Decision: BUILD (source code changed)"
          else
            echo "‚ôªÔ∏è  Decision: CACHE (only tests/docs changed, will attempt APK download)"
          fi
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      - name: Find cached APK
        if: |
          steps.filter.outputs.build_required != 'true' &&
          github.ref != 'refs/heads/main' &&
          !startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "‚ôªÔ∏è  Looking for cached APK from previous runs..."
          echo ""

          # Use head_ref for PRs, ref_name for direct pushes
          BRANCH="${{ github.head_ref || github.ref_name }}"
          echo "üîç Searching on branch: $BRANCH"
          echo ""

          # List recent runs on the correct branch
          echo "üìã Recent workflow runs on this branch:"
          gh run list --workflow build-test.yml --branch "$BRANCH" --limit 10 --json databaseId,status,conclusion | \
            jq -r '.[] | "  Run #\(.databaseId) - Status: \(.status) - Conclusion: \(.conclusion)"'
          echo ""

          # Get list of recent run IDs
          echo "üîç Checking each run for build-apk artifact..."
          RUN_IDS=$(gh run list \
            --workflow build-test.yml \
            --branch "$BRANCH" \
            --limit 10 \
            --json databaseId \
            --jq '.[].databaseId')

          FOUND=false
          for RUN_ID in $RUN_IDS; do
            echo "  üì¶ Checking run #$RUN_ID..."

            # List all artifacts for this run
            ARTIFACTS=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" --jq '.artifacts[] | .name' 2>/dev/null || echo "")

            if [ -n "$ARTIFACTS" ]; then
              echo "    Found artifacts: $(echo $ARTIFACTS | tr '\n' ', ' | sed 's/,$//')"

              # Check if build-apk is among them
              if echo "$ARTIFACTS" | grep -q "build-apk"; then
                echo "    ‚úÖ This run has build-apk!"
                echo "CACHED_RUN_ID=$RUN_ID" >> $GITHUB_ENV
                FOUND=true
                break
              fi
            else
              echo "    No artifacts found"
            fi
          done

          echo ""
          # If no artifact was found, fall back to building
          if [ "$FOUND" = false ]; then
            echo "‚ö†Ô∏è  No APK artifact found in recent runs ‚Üí Will build fresh APK"
            echo "BUILD_FALLBACK=true" >> $GITHUB_ENV
          fi

      - name: Download cached APK
        if: |
          steps.filter.outputs.build_required != 'true' &&
          github.ref != 'refs/heads/main' &&
          !startsWith(github.ref, 'refs/tags/') &&
          env.CACHED_RUN_ID != ''
        continue-on-error: true
        id: download
        uses: actions/download-artifact@v5
        with:
          name: build-apk
          run-id: ${{ env.CACHED_RUN_ID }}
          github-token: ${{ github.token }}

      - name: Handle download failure
        if: |
          steps.filter.outputs.build_required != 'true' &&
          github.ref != 'refs/heads/main' &&
          !startsWith(github.ref, 'refs/tags/') &&
          steps.download.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è  Download failed ‚Üí Will build fresh APK"
          echo "BUILD_FALLBACK=true" >> $GITHUB_ENV

      - name: Setup Java
        if: |
          steps.filter.outputs.build_required == 'true' ||
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/') ||
          env.BUILD_FALLBACK == 'true'
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        if: |
          steps.filter.outputs.build_required == 'true' ||
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/') ||
          env.BUILD_FALLBACK == 'true'
        uses: android-actions/setup-android@v3

      - name: Setup EAS
        if: |
          steps.filter.outputs.build_required == 'true' ||
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/') ||
          env.BUILD_FALLBACK == 'true'
        uses: expo/expo-github-action@v8
        with:
          eas-version: 16.3.0
          packager: 'npm'
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK locally
        if: |
          steps.filter.outputs.build_required == 'true' ||
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/') ||
          env.BUILD_FALLBACK == 'true'
        run: npm run build:test:android

      - name: Rename APK to consistent name
        if: |
          steps.filter.outputs.build_required == 'true' ||
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/') ||
          env.BUILD_FALLBACK == 'true'
        run: |
          mv build-*.apk recipedia-e2e.apk
          echo "‚úÖ APK built and renamed to recipedia-e2e.apk"

      - name: Verify APK availability
        run: |
          if [ -f "recipedia-e2e.apk" ]; then
            if [ "${{ env.CACHED_RUN_ID }}" != "" ]; then
              echo "‚úÖ Using cached APK from run #${{ env.CACHED_RUN_ID }}"
            else
              echo "‚úÖ Using freshly built APK"
            fi
          else
            echo "‚ùå APK not found!"
            exit 1
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: build-apk
          path: recipedia-e2e.apk
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-android
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Download APK
        uses: actions/download-artifact@v5
        with:
          name: build-apk

      - name: Install Maestro CLI
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Android Emulator and run E2E tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 35
          arch: x86_64
          disable-animations: 'true'
          script: |
            npm run install:android
            npm run test:e2e:android

      - name: Upload Maestro test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-test-results
          path: maestro_logs/.maestro/tests
          retention-days: 7
